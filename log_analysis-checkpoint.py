{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "26a052af-e72d-49ab-9888-56a74c8b4435",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting prettytable\n",
      "  Downloading prettytable-3.12.0-py3-none-any.whl.metadata (30 kB)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\sayaan\\anaconda3\\lib\\site-packages (from prettytable) (0.2.5)\n",
      "Downloading prettytable-3.12.0-py3-none-any.whl (31 kB)\n",
      "Installing collected packages: prettytable\n",
      "Successfully installed prettytable-3.12.0\n",
      "\n",
      "=== Requests Per IP ===\n",
      "+---------------+---------------+\n",
      "|   IP Address  | Request Count |\n",
      "+---------------+---------------+\n",
      "|  203.0.113.5  |       8       |\n",
      "| 198.51.100.23 |       8       |\n",
      "|  192.168.1.1  |       7       |\n",
      "|    10.0.0.2   |       6       |\n",
      "| 192.168.1.100 |       5       |\n",
      "+---------------+---------------+\n",
      "\n",
      "=== Most Frequently Accessed Endpoint ===\n",
      "/login (Accessed 13 times)\n",
      "\n",
      "=== Suspicious Activity Detected ===\n",
      "+-------------+-----------------------+\n",
      "|  IP Address | Failed Login Attempts |\n",
      "+-------------+-----------------------+\n",
      "| 203.0.113.5 |           8           |\n",
      "+-------------+-----------------------+\n",
      "\n",
      "Results saved to log_analysis_results.csv and log_analysis_report.html\n"
     ]
    }
   ],
   "source": [
    "\n",
    "!pip install prettytable\n",
    "import re\n",
    "import csv\n",
    "from collections import Counter\n",
    "from prettytable import PrettyTable\n",
    "\n",
    "# Configuration\n",
    "log_file_path = \"sample.log\"\n",
    "output_csv_path = \"log_analysis_results.csv\"\n",
    "output_html_path = \"log_analysis_report.html\"\n",
    "FAILED_LOGIN_THRESHOLD = 5\n",
    "\n",
    "def parse_log_file(file_path):\n",
    "    \"\"\"\n",
    "    It parses web server logs into structured data.\n",
    "    Args:\n",
    "        file_path: Path to log file\n",
    "    Returns:\n",
    "        List of dicts containing IP, method, endpoint, and status\n",
    "    \"\"\"\n",
    "    with open(file_path, \"r\") as file:\n",
    "        logs = file.readlines()\n",
    "    log_data = []\n",
    "    log_pattern = re.compile(\n",
    "        r'(?P<ip>\\d+\\.\\d+\\.\\d+\\.\\d+) - - \\[.*?\\] \"(?P<method>\\w+) (?P<endpoint>\\S+) HTTP/\\d+\\.\\d+\" (?P<status>\\d+) .*'\n",
    "    )\n",
    "    for line in logs:\n",
    "        match = log_pattern.match(line)\n",
    "        if match:\n",
    "            log_data.append(match.groupdict())\n",
    "    return log_data\n",
    "\n",
    "def analyze_requests_per_ip(log_data):\n",
    "    \"\"\"\n",
    "    It counts requests from each IP address.\n",
    "\n",
    "    Args:\n",
    "        log_data: Parsed log entries\n",
    "    Returns:\n",
    "        List of (IP, count) tuples, sorted by count\n",
    "    \"\"\"\n",
    "    ip_counter = Counter(log['ip'] for log in log_data)\n",
    "    return ip_counter.most_common()\n",
    "\n",
    "def analyze_most_accessed_endpoint(log_data):\n",
    "    \"\"\"\n",
    "    It finds the most frequently accessed endpoint.\n",
    "\n",
    "    Args:\n",
    "        log_data: Parsed log entries\n",
    "    Returns:\n",
    "        Tuple of (endpoint, count) or None\n",
    "    \"\"\"\n",
    "    endpoint_counter = Counter(log['endpoint'] for log in log_data)\n",
    "    most_accessed = endpoint_counter.most_common(1)\n",
    "    return most_accessed[0] if most_accessed else None\n",
    "\n",
    "def detect_suspicious_activity(log_data, threshold=FAILED_LOGIN_THRESHOLD):\n",
    "    \"\"\"\n",
    "    It identifies IPs with excessive failed logins.\n",
    "\n",
    "    Args:\n",
    "        log_data: Parsed log entries\n",
    "        threshold: Failed login limit\n",
    "    Returns:\n",
    "        Dict of suspicious IPs and their failed counts\n",
    "    \"\"\"\n",
    "    failed_login_counter = Counter(\n",
    "        log['ip'] for log in log_data if log['status'] == '401' or 'Invalid credentials' in log.get('message', '')\n",
    "    )\n",
    "    suspicious_ips = {ip: count for ip, count in failed_login_counter.items() if count > threshold}\n",
    "    return suspicious_ips\n",
    "\n",
    "def save_to_csv(ip_requests, most_accessed_endpoint, suspicious_activity, output_path):\n",
    "    \"\"\"\n",
    "    It exports results to CSV format.\n",
    "\n",
    "    Args:\n",
    "        ip_requests: IP traffic data\n",
    "        most_accessed_endpoint: Popular endpoint data\n",
    "        suspicious_activity: Security alerts\n",
    "        output_path: Target file path\n",
    "    \"\"\"\n",
    "    with open(output_path, mode='w', newline='') as csv_file:\n",
    "        writer = csv.writer(csv_file)\n",
    "        \n",
    "        # Write requests per IP\n",
    "        writer.writerow([\"IP Address\", \"Request Count\"])\n",
    "        for ip, count in ip_requests:\n",
    "            writer.writerow([ip, count])\n",
    "        \n",
    "        # Write Most Frequently Accessed Endpoint:\n",
    "        writer.writerow([])\n",
    "        writer.writerow([\"Most Frequently Accessed Endpoint:\", \"Access Count\"])\n",
    "        if most_accessed_endpoint:\n",
    "            writer.writerow(most_accessed_endpoint)\n",
    "        \n",
    "        # Write suspicious activity\n",
    "        writer.writerow([])\n",
    "        writer.writerow([\"Suspicious Activity Detected\"])\n",
    "        writer.writerow([\"IP Address\", \"Failed Login Attempts\"])\n",
    "        for ip, count in suspicious_activity.items():\n",
    "            writer.writerow([ip, count])\n",
    "\n",
    "def save_to_html(ip_requests, most_accessed_endpoint, suspicious_activity, output_path):\n",
    "    \"\"\"\n",
    "    It generates interactive HTML report.\n",
    "\n",
    "    Args:\n",
    "        ip_requests: IP traffic data\n",
    "        most_accessed_endpoint: Popular endpoint data\n",
    "        suspicious_activity: Security alerts\n",
    "        output_path: Target file path\n",
    "    \"\"\"\n",
    "    with open(output_path, \"w\") as html_file:\n",
    "        html_file.write(\"\"\"\n",
    "<html>\n",
    "  <head>\n",
    "    <title>Log Analysis Report</title>\n",
    "    <style>\n",
    "      body {\n",
    "        font-family: Arial, sans-serif;\n",
    "        margin: 20px;\n",
    "        background-color: #f4f4f9;\n",
    "        color: #333;\n",
    "      }\n",
    "      h1, h2 {\n",
    "        text-align: center;\n",
    "        color: #0047ab;\n",
    "      }\n",
    "      table {\n",
    "        width: 80%;\n",
    "        margin: 20px auto;\n",
    "        border-collapse: collapse;\n",
    "        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n",
    "        background-color: #ffffff;\n",
    "      }\n",
    "      th, td {\n",
    "        border: 1px solid #dddddd;\n",
    "        text-align: center;\n",
    "        padding: 10px;\n",
    "      }\n",
    "      th {\n",
    "        background-color: #0047ab;\n",
    "        color: white;\n",
    "        font-weight: bold;\n",
    "      }\n",
    "      tr:nth-child(even) {\n",
    "        background-color: #f9f9f9;\n",
    "      }\n",
    "      tr:hover {\n",
    "        background-color: #f1f1f1;\n",
    "      }\n",
    "      p {\n",
    "        text-align: center;\n",
    "        font-size: 18px;\n",
    "        font-style: italic;\n",
    "        color: #333;\n",
    "      }\n",
    "    </style>\n",
    "  </head>\n",
    "  <body>\n",
    "    <h1>Log Analysis Report</h1>\n",
    "    <h2>Requests Per IP</h2>\n",
    "    <table>\n",
    "      <tr>\n",
    "        <th>IP Address</th>\n",
    "        <th>Request Count</th>\n",
    "      </tr>\n",
    "\"\"\")\n",
    "        # Add Requests Per IP\n",
    "        for ip, count in ip_requests:\n",
    "            html_file.write(f\"      <tr><td>{ip}</td><td>{count}</td></tr>\\n\")\n",
    "        html_file.write(\"\"\"\n",
    "    </table>\n",
    "    <h2>Most Frequently Accessed Endpoint</h2>\n",
    "\"\"\")\n",
    "        # Add Most Frequently Accessed Endpoint:\n",
    "        if most_accessed_endpoint:\n",
    "            html_file.write(f\"    <p>{most_accessed_endpoint[0]} (Accessed {most_accessed_endpoint[1]} times)</p>\\n\")\n",
    "        else:\n",
    "            html_file.write(\"    <p>No endpoints accessed.</p>\\n\")\n",
    "        \n",
    "        # Add Suspicious Activity\n",
    "        html_file.write(\"\"\"\n",
    "    <h2>Suspicious Activity Detected</h2>\n",
    "    <table>\n",
    "      <tr>\n",
    "        <th>IP Address</th>\n",
    "        <th>Failed Login Attempts</th>\n",
    "      </tr>\n",
    "\"\"\")\n",
    "        if suspicious_activity:\n",
    "            for ip, count in suspicious_activity.items():\n",
    "                html_file.write(f\"      <tr><td>{ip}</td><td>{count}</td></tr>\\n\")\n",
    "        else:\n",
    "            html_file.write(\"    <p>No suspicious activity detected.</p>\\n\")\n",
    "        \n",
    "        html_file.write(\"\"\"\n",
    "    </table>\n",
    "  </body>\n",
    "</html>\n",
    "\"\"\")\n",
    "\n",
    "def display_results(ip_requests, most_accessed_endpoint, suspicious_activity):\n",
    "    \"\"\"\n",
    "    Show results in terminal using formatted tables.\n",
    "\n",
    "    Args:\n",
    "        ip_requests: IP traffic data\n",
    "        most_accessed_endpoint: Popular endpoint data\n",
    "        suspicious_activity: Security alerts\n",
    "    \"\"\"\n",
    "    print(\"\\n=== Requests Per IP ===\")\n",
    "    table = PrettyTable([\"IP Address\", \"Request Count\"])\n",
    "    for ip, count in ip_requests:\n",
    "        table.add_row([ip, count])\n",
    "    print(table)\n",
    "    \n",
    "    print(\"\\n=== Most Frequently Accessed Endpoint ===\")\n",
    "    if most_accessed_endpoint:\n",
    "        print(f\"{most_accessed_endpoint[0]} (Accessed {most_accessed_endpoint[1]} times)\")\n",
    "    else:\n",
    "        print(\"No endpoints accessed.\")\n",
    "    \n",
    "    print(\"\\n=== Suspicious Activity Detected ===\")\n",
    "    if suspicious_activity:\n",
    "        suspicious_table = PrettyTable([\"IP Address\", \"Failed Login Attempts\"])\n",
    "        for ip, count in suspicious_activity.items():\n",
    "            suspicious_table.add_row([ip, count])\n",
    "        print(suspicious_table)\n",
    "    else:\n",
    "        print(\"No suspicious activity detected.\")\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Run complete analysis workflow:\n",
    "    Parse logs → Analyze data → Generate reports\n",
    "    \"\"\"\n",
    "    # Parse the log file\n",
    "    log_data = parse_log_file(log_file_path)\n",
    "\n",
    "    # Analyze the log data\n",
    "    ip_requests = analyze_requests_per_ip(log_data)\n",
    "    most_accessed_endpoint = analyze_most_accessed_endpoint(log_data)\n",
    "    suspicious_activity = detect_suspicious_activity(log_data)\n",
    "\n",
    "    # Display the results\n",
    "    display_results(ip_requests, most_accessed_endpoint, suspicious_activity)\n",
    "\n",
    "    # Save the results to a CSV file\n",
    "    save_to_csv(ip_requests, most_accessed_endpoint, suspicious_activity, output_csv_path)\n",
    "\n",
    "    # Save the results to an HTML file\n",
    "    save_to_html(ip_requests, most_accessed_endpoint, suspicious_activity, output_html_path)\n",
    "\n",
    "    print(f\"\\nResults saved to {output_csv_path} and {output_html_path}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad1c927c-196b-48c3-851b-45ae08918857",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
